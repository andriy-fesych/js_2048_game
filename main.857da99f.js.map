{"version":3,"sources":["scripts/main.js"],"names":["getX","id","getY","Math","floor","score","document","querySelector","startMessage","winMessage","loseMessage","moveDone","gameState","allTiles","querySelectorAll","map","cellNode","index","dataset","cellId","executeDefeat","classList","remove","checkMoves","filter","cell","innerText","length","coodrTiles","tile","ind","newObj","x","y","value","cellNeighboursValues","find","sub","item","undefined","includes","checkFor2048","some","changeValue","newValue","Allign","chunk","values","initialValuesStr","join","nonZero","val","j","createNewTile","EmptyTiles","randomIndex","random","randomValue","add","moveAll","direction","chunks","forEach","push","reverse","window","addEventListener","e","target","key"],"mappings":"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","file":"main.857da99f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n// id to coords:\n// x = id % 4\n// y = Math.floor(id / 4)\n//\n// coords to id:\n// Y*4 + X = id\n\n/*\n  Missing movement animation\n*/\n\nconst getX = id => id % 4;\nconst getY = id => Math.floor(id / 4);\n\nconst score = document.querySelector('#game-score');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nlet moveDone = false;\nlet gameState = 'start';\n\nconst allTiles = [...(document.querySelectorAll('.field-cell'))]\n  .map((cellNode, index) => {\n    cellNode.dataset.cellId = index;\n\n    return cellNode;\n  });\n\nfunction executeDefeat() {\n  // player lost the game\n  gameState = 'defeat';\n  loseMessage.classList.remove('hidden');\n}\n\nfunction checkMoves() {\n  if (allTiles.filter(cell => cell.innerText === '').length > 0) {\n    return;\n  }\n\n  const coodrTiles = allTiles.map((tile, ind) => {\n    const newObj = {\n      x: getX(tile.dataset.cellId),\n      y: getY(tile.dataset.cellId),\n      value: +tile.innerText,\n      index: ind,\n    };\n\n    return newObj;\n  });\n\n  for (const cell of coodrTiles) {\n    const cellNeighbours = [\n      coodrTiles.find(sub => sub.x === (cell.x - 1)\n        && (sub.y === cell.y)),\n      coodrTiles.find(sub => sub.x === (cell.x + 1)\n        && (sub.y === cell.y)),\n      coodrTiles.find(sub => sub.y === (cell.y - 1)\n        && (sub.x === cell.x)),\n      coodrTiles.find(sub => sub.y === (cell.y + 1)\n        && (sub.x === cell.x)),\n    ];\n\n    const cellNeighboursValues = cellNeighbours\n      .filter(item => item !== undefined)\n      .map(tile => tile.value);\n\n    if (cellNeighboursValues.includes(cell.value)) {\n      // neighbour cell has same value, move available\n      return;\n    }\n  }\n\n  executeDefeat();\n}\n\nfunction checkFor2048() {\n  if (allTiles.map(cell => cell.innerText).some(value => value === '2048')) {\n    // player won the game\n    gameState = 'win';\n    winMessage.classList.remove('hidden');\n  }\n}\n\nfunction changeValue(tile, newValue) {\n  tile.innerText = newValue;\n\n  if (!newValue) {\n    tile.classList = 'field-cell';\n  } else {\n    tile.classList = `field-cell field-cell--${newValue}`;\n  }\n}\n\nfunction Allign(chunk) {\n  // [2.0.0.2] => [2.2] => [4] => [4.0.0.0]\n  // [0.4.0.8] => [4.8] => [4.8.0.0]\n  let values = chunk.map(cell => cell.innerText);\n  const initialValuesStr = values.join('+');\n  const nonZero = values.filter(val => val !== '');\n\n  if (nonZero.length !== 0) {\n    values = values.filter(val => val !== '');\n\n    if (nonZero.length === 1) {\n      values = [nonZero[0], '', '', ''];\n\n      for (let j = 0; j < 4; j++) {\n        changeValue(chunk[j], `${values[j]}`);\n      }\n\n      if (values.join('+') !== initialValuesStr) {\n        moveDone = true;\n      }\n    } else if (nonZero.length > 1) {\n      for (let j = 1; j < nonZero.length; j++) {\n        if (values[j - 1] === values[j]) {\n          values[j - 1] *= 2;\n          values[j] = '';\n          score.innerText = `${+score.innerText + (values[j - 1])}`;\n        }\n      }\n\n      values = values.filter(val => val !== '');\n\n      for (let j = 0; j < 4; j++) {\n        changeValue(chunk[j], `${values[j] || ''}`);\n      }\n\n      if (chunk.map(cell => cell.innerText).join('+') !== initialValuesStr) {\n        moveDone = true;\n      }\n    }\n  }\n}\n\nfunction createNewTile() {\n  const EmptyTiles = allTiles.filter(cell => cell.innerText === '');\n\n  if (EmptyTiles.length > 0) {\n    const randomIndex = Math.floor(EmptyTiles.length * Math.random());\n    const randomValue = Math.random() < 0.9 ? 2 : 4;\n\n    EmptyTiles[randomIndex].innerText = randomValue;\n    EmptyTiles[randomIndex].classList.add(`field-cell--${randomValue}`);\n  };\n}\n\nfunction moveAll(direction) {\n  let chunks = [];\n\n  switch (direction) {\n    case 'Up':\n      chunks = [];\n\n      allTiles.forEach(tile => {\n        chunks[getX(tile.dataset.cellId)]\n          ? chunks[getX(tile.dataset.cellId)].push(tile)\n          : chunks[getX(tile.dataset.cellId)] = [tile];\n      });\n\n      chunks.forEach(chunk => {\n        Allign(chunk);\n      });\n      break;\n    case 'Down':\n      chunks = [];\n\n      allTiles.forEach(tile => {\n        chunks[getX(tile.dataset.cellId)]\n          ? chunks[getX(tile.dataset.cellId)].push(tile)\n          : chunks[getX(tile.dataset.cellId)] = [tile];\n      });\n\n      chunks.forEach(chunk => {\n        Allign(chunk.reverse());\n      });\n      break;\n    case 'Left':\n      chunks = [];\n\n      allTiles.forEach(tile => {\n        chunks[getY(tile.dataset.cellId)]\n          ? chunks[getY(tile.dataset.cellId)].push(tile)\n          : chunks[getY(tile.dataset.cellId)] = [tile];\n      });\n\n      chunks.forEach(chunk => {\n        Allign(chunk);\n      });\n      break;\n    case 'Right':\n      chunks = [];\n\n      allTiles.forEach(tile => {\n        chunks[getY(tile.dataset.cellId)]\n          ? chunks[getY(tile.dataset.cellId)].push(tile)\n          : chunks[getY(tile.dataset.cellId)] = [tile];\n      });\n\n      chunks.forEach(chunk => {\n        Allign(chunk.reverse());\n      });\n      break;\n    default:\n      break;\n  }\n};\n\nwindow.addEventListener('click', (e) => {\n  if (e.target.id === 'startButton') {\n    if (gameState === 'start') {\n      createNewTile();\n      createNewTile();\n      gameState = 'playing';\n      e.target.innerText = 'Restart';\n      e.target.classList.add('restart');\n      startMessage.classList.add('hidden');\n    } else {\n      score.innerText = '0';\n      allTiles.forEach(tile => changeValue(tile, ''));\n      moveDone = false;\n      gameState = 'playing';\n      createNewTile();\n      createNewTile();\n    }\n  }\n});\n\nwindow.addEventListener('keydown', (e) => {\n  if (gameState === 'playing') {\n    switch (e.key) {\n      case 'ArrowUp':\n        moveAll('Up');\n        break;\n      case 'ArrowDown':\n        moveAll('Down');\n        break;\n      case 'ArrowRight':\n        moveAll('Right');\n        break;\n      case 'ArrowLeft':\n        moveAll('Left');\n        break;\n      default:\n        break;\n    }\n\n    if (moveDone === true) {\n      createNewTile();\n      moveDone = false;\n    }\n  };\n\n  checkFor2048();\n  checkMoves();\n});\n"]}